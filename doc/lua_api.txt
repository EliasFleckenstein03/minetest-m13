-- Quick documentation about the API
-- =================================
--
-- Helper functions defined by builtin.lua:
-- dump2(obj, name="_", dumped={})
-- dump(obj, dumped={})
--
-- Mod load path
-- -------------
-- Generic:
-- $path_data/mods/
-- $path_userdata/usermods/
-- $mapdir/worldmods/
--
-- On a run-in-place version (eg. the distributed windows version):
-- minetest-0.4.x/data/mods/
-- minetest-0.4.x/usermods/
-- minetest-0.4.x/world/worldmods/
--
-- On an installed version on linux:
-- /usr/share/minetest/mods/
-- ~/.minetest/usermods
-- ~/.minetest/world/worldmods
--
-- Naming convention for registered textual names
-- ----------------------------------------------
-- "modname:<whatever>" (<whatever> can have characters a-zA-Z0-9_)
--
-- This is to prevent conflicting names from corrupting maps and is
-- enforced by the mod loader.
--
-- Example: mod "experimental", ideal item/node/entity name "tnt":
--          -> the name should be "experimental:tnt".
--
-- Enforcement can be overridden by prefixing the name with ":". This can
-- be used for overriding the registrations of some other mod.
--
-- Example: Any mod can redefine experimental:tnt by using the name
--          ":experimental:tnt" when registering it.
-- (also that mods is required to have "experimental" as a dependency)
--
-- The legacy mod uses ":" for maintaining backwards compatibility.
--
-- Textures
-- --------
-- Mods should generally prefix their textures with modname_, eg. given
-- the mod name "foomod", a texture could be called "default_foomod_superfurnace.png"
--
-- This is not crucial and a conflicting name will not corrupt maps.
--
-- Representations of simple things
-- --------------------------------
--
-- MapNode representation:
-- {name="name", param1=num, param2=num}
--
-- param1 and param2 are 8 bit and 4 bit integers, respectively. They
-- are reserved for certain automated functions. If you don't use these
-- functions, you can use them to store arbitrary values.
--
-- param1 is reserved for the engine when:
--   paramtype != "none"
-- param2 is reserved for the engine when any of these are used:
--   liquidtype == "flowing"
--   drawtype == "flowingliquid"
--   drawtype == "torchlike"
--   drawtype == "signlike"
--
-- Position representation:
-- {x=num, y=num, z=num}
--
-- stackstring/itemstring: A stack of items in serialized format.
-- eg. 'node "default:dirt" 5'
-- eg. 'tool "default:pick_wood" 21323'
-- eg. 'craft "default:apple" 2'
--
-- item: A stack of items in Lua table format.
-- eg. {name="default:dirt", count=1, wear=0, metadata=""}
--     ^ a single dirt node
-- eg. {name="default:pick_wood", count=1, wear=21323, metadata=""}
--     ^ a wooden pick about 1/3 weared out
-- eg. {name="default:apple", count=1, wear=0, metadata=""}
--     ^ an apple.
--
-- Any time an item must be passed to a function, it can be an
-- ItemStack (see below), an itemstring or a table in the above format.
--
-- Global functions:
-- minetest.register_entity(name, prototype table)
-- minetest.register_abm(abm definition)
-- minetest.register_node(name, node definition)
-- minetest.register_tool(name, item definition)
-- minetest.register_craftitem(name, item definition)
-- minetest.register_alias(name, convert_to)
-- minetest.register_craft(recipe)
-- minetest.register_globalstep(func(dtime))
-- minetest.register_on_placenode(func(pos, newnode, placer))
-- minetest.register_on_dignode(func(pos, oldnode, digger))
-- minetest.register_on_punchnode(func(pos, node, puncher))
-- minetest.register_on_generated(func(minp, maxp))
-- minetest.register_on_newplayer(func(ObjectRef))
-- minetest.register_on_dieplayer(func(ObjectRef))
-- minetest.register_on_respawnplayer(func(ObjectRef))
-- ^ return true in func to disable regular player placement
-- ^ currently called _before_ repositioning of player occurs
-- minetest.register_on_chat_message(func(name, message))
-- minetest.add_to_creative_inventory(itemstring)
-- minetest.setting_get(name) -> string or nil
-- minetest.setting_getbool(name) -> boolean value or nil
-- minetest.chat_send_all(text)
-- minetest.chat_send_player(name, text)
-- minetest.get_player_privs(name) -> set of privs
-- minetest.get_inventory(location) -> InvRef
-- minetest.get_current_modname() -> string
-- minetest.get_modpath(modname) -> eg. "/home/user/.minetest/usermods/modname"
-- ^ location = eg. {type="player", name="celeron55"}
--                  {type="node", pos={x=, y=, z=}}
--
-- minetest.debug(line)
-- ^ Goes to dstream
-- minetest.log(line)
-- minetest.log(loglevel, line)
-- ^ loglevel one of "error", "action", "info", "verbose"
--
-- minetest.digprop_constanttime(time)
-- minetest.digprop_stonelike(toughness)
-- minetest.digprop_dirtlike(toughness)
-- minetest.digprop_gravellike(toughness)
-- minetest.digprop_woodlike(toughness)
-- minetest.digprop_leaveslike(toughness)
-- minetest.digprop_glasslike(toughness)
--
-- Global objects:
-- minetest.env - environment reference
--
-- Global tables:
-- minetest.registered_items
-- ^ List of registered items, indexed by name
-- minetest.registered_nodes
-- ^ List of registered node definitions, indexed by name
-- minetest.registered_craftitems
-- ^ List of registered craft item definitions, indexed by name
-- minetest.registered_tools
-- ^ List of registered tool definitions, indexed by name
-- minetest.registered_entities
-- ^ List of registered entity prototypes, indexed by name
-- minetest.object_refs
-- ^ List of object references, indexed by active object id
-- minetest.luaentities
-- ^ List of lua entities, indexed by active object id
--
-- EnvRef is basically ServerEnvironment and ServerMap combined.
-- EnvRef methods:
-- - add_node(pos, node)
-- - remove_node(pos)
-- - get_node(pos)
--   ^ Returns {name="ignore", ...} for unloaded area
-- - get_node_or_nil(pos)
--   ^ Returns nil for unloaded area
-- - get_node_light(pos, timeofday) -> 0...15 or nil
--   ^ timeofday: nil = current time, 0 = night, 0.5 = day
-- - add_entity(pos, name): Returns ObjectRef or nil if failed
-- - add_item(pos, itemstring)
-- - add_rat(pos)
-- - add_firefly(pos)
-- - get_meta(pos) -- Get a NodeMetaRef at that position
-- - get_player_by_name(name) -- Get an ObjectRef to a player
-- - get_objects_inside_radius(pos, radius)
--
-- NodeMetaRef (this stuff is subject to change in a future version)
-- - get_type()
-- - allows_text_input()
-- - set_text(text) -- eg. set the text of a sign
-- - get_text()
-- - get_owner()
-- - set_owner(string)
-- Generic node metadata specific:
-- - set_infotext(infotext)
-- - get_inventory() -> InvRef
-- - set_inventory_draw_spec(string)
-- - set_allow_text_input(bool)
-- - set_allow_removal(bool)
-- - set_enforce_owner(bool)
-- - is_inventory_modified()
-- - reset_inventory_modified()
-- - is_text_modified()
-- - reset_text_modified()
-- - set_string(name, value)
-- - get_string(name)
--
-- ObjectRef is basically ServerActiveObject.
-- ObjectRef methods:
-- - remove(): remove object (after returning from Lua)
-- - getpos() -> {x=num, y=num, z=num}
-- - setpos(pos); pos={x=num, y=num, z=num}
-- - moveto(pos, continuous=false): interpolated move
-- - punch(puncher, time_from_last_punch)
--   ^ puncher = an another ObjectRef,
--   ^ time_from_last_punch = time since last punch action of the puncher
-- - right_click(clicker); clicker = an another ObjectRef
-- - get_hp(): returns number of hitpoints (2 * number of hearts)
-- - set_hp(hp): set number of hitpoints (2 * number of hearts)
-- - get_inventory() -> InvRef
-- - get_wield_list(): returns the name of the inventory list the wielded item is in
-- - get_wield_index(): returns the index of the wielded item
-- - get_wielded_item() -> ItemStack
-- - set_wielded_item(item): replaces the wielded item, returns true if successful
-- LuaEntitySAO-only: (no-op for other objects)
-- - setvelocity({x=num, y=num, z=num})
-- - getvelocity() -> {x=num, y=num, z=num}
-- - setacceleration({x=num, y=num, z=num})
-- - getacceleration() -> {x=num, y=num, z=num}
-- - setyaw(radians)
-- - getyaw() -> radians
-- - settexturemod(mod)
-- - setsprite(p={x=0,y=0}, num_frames=1, framelength=0.2,
-- -           select_horiz_by_yawpitch=false)
-- - ^ Select sprite from spritesheet with optional animation and DM-style
-- -   texture selection based on yaw relative to camera
-- - get_entity_name() (DEPRECATED: Will be removed in a future version)
-- - get_luaentity()
-- Player-only: (no-op for other objects)
-- - get_player_name(): will return nil if is not a player
-- - get_look_dir(): get camera direction as a unit vector
-- - get_look_pitch(): pitch in radians
-- - get_look_yaw(): yaw in radians (wraps around pretty randomly as of now)
--
-- InvRef methods:
-- - get_size(listname): get size of a list
-- - set_size(listname, size): set size of a list
-- - get_stack(listname, i): get a copy of stack index i in list
-- - set_stack(listname, i, stack): copy stack to index i in list
-- - get_list(listname): return full list
-- - set_list(listname, list): set full list (size will not change)
-- - add_item(listname, stack): add item somewhere in list, returns leftover ItemStack
-- - room_for_item(listname, stack): returns true if the stack of items
--     can be fully added to the list
-- - contains_item(listname, stack): returns true if the stack of items
--     can be fully taken from the list
--   remove_item(listname, stack): take as many items as specified from the list,
--     returns the items that were actually removed (as an ItemStack)
--
-- ItemStack methods:
-- - is_empty(): return true if stack is empty
-- - get_name(): returns item name (e.g. "default:stone")
-- - get_count(): returns number of items on the stack
-- - get_wear(): returns tool wear (0-65535), 0 for non-tools
-- - get_metadata(): returns metadata (a string attached to an item stack)
-- - clear(): removes all items from the stack, making it empty
-- - replace(item): replace the contents of this stack (item can also
--     be an itemstring or table)
-- - to_string(): returns the stack in itemstring form
-- - to_table(): returns the stack in Lua table form
-- - get_stack_max(): returns the maximum size of the stack (depends on the item)
-- - get_free_space(): returns get_stack_max() - get_count()
-- - is_known(): returns true if the item name refers to a defined item type
-- - get_definition(): returns the item definition table
-- - get_tool_digging_properties(): returns the digging properties of the item,
--   ^ or those of the hand if none are defined for this item type
-- - add_wear(amount): increases wear by amount if the item is a tool
-- - add_item(item): put some item or stack onto this stack,
--   ^ returns leftover ItemStack
-- - item_fits(item): returns true if item or stack can be fully added to this one
-- - take_item(n): take (and remove) up to n items from this stack
--   ^ returns taken ItemStack
--   ^ if n is omitted, n=1 is used
-- - peek_item(n): copy (don't remove) up to n items from this stack
--   ^ returns copied ItemStack
--   ^ if n is omitted, n=1 is used
--
-- Registered entities:
-- - Functions receive a "luaentity" as self:
--   - It has the member .name, which is the registered name ("mod:thing")
--   - It has the member .object, which is an ObjectRef pointing to the object
--   - The original prototype stuff is visible directly via a metatable
-- - Callbacks:
--   - on_activate(self, staticdata)
--   - on_step(self, dtime)
--   - on_punch(self, hitter)
--   - on_rightclick(self, clicker)
--   - get_staticdata(self)
--     ^ return string that will be passed to on_activate when the object
--       is created next time
--
-- Entity prototype table:
-- {
--     physical = true,
--     collisionbox = {-0.5,-0.5,-0.5, 0.5,0.5,0.5},
--     visual = "cube"/"sprite",
--     visual_size = {x=1, y=1},
--     textures = {texture,texture,texture,texture,texture,texture},
--     spritediv = {x=1, y=1},
--     initial_sprite_basepos = {x=0, y=0},
--     on_activate = function(self, staticdata),
--     on_step = function(self, dtime),
--     on_punch = function(self, hitter),
--     on_rightclick = function(self, clicker),
--     get_staticdata = function(self),
--     # Also you can define arbitrary member variables here
--     myvariable = whatever,
-- }
--
-- Item definition options (register_node, register_craftitem, register_tool)
-- {
--     description = "Steel Axe",
--     inventory_image = "default_tool_steelaxe.png",
--     wield_image = "",
--     wield_scale = {x=1,y=1,z=1},
--     stack_max = 99,
--     liquids_pointable = false,
--     tool_digging_properties = {
--         full_punch_interval = 1.0,
--         basetime = 1.0,
--         dt_weight = 0.5,
--         dt_crackiness = -0.2,
--         dt_crumbliness = 1,
--         dt_cuttability = -0.5,
--         basedurability = 330,
--         dd_weight = 0,
--         dd_crackiness = 0,
--         dd_crumbliness = 0,
--         dd_cuttability = 0,
--     }
--     on_drop = func(item, dropper, pos),
--     on_place = func(item, placer, pointed_thing),
--     on_use = func(item, user, pointed_thing),
-- }
--
-- Node definition options (register_node):
-- {
--     <all fields allowed in item definitions>,
--     drawtype = "normal",
--     visual_scale = 1.0,
--     tile_images = {"default_unknown_block.png"},
--     special_materials = {
--         {image="", backface_culling=true},
--         {image="", backface_culling=true},
--     },
--     alpha = 255,
--     post_effect_color = {a=0, r=0, g=0, b=0},
--     paramtype = "none",
--     paramtype2 = "none",
--     is_ground_content = false,
--     sunlight_propagates = false,
--     walkable = true,
--     pointable = true,
--     diggable = true,
--     climbable = false,
--     buildable_to = false,
--     drop = "",
--     -- alternatively drop = { max_items = ..., items = { ... } }
--     metadata_name = "",
--     liquidtype = "none",
--     liquid_alternative_flowing = "",
--     liquid_alternative_source = "",
--     liquid_viscosity = 0,
--     light_source = 0,
--     damage_per_second = 0,
--     selection_box = {type="regular"},
--     material = {
--         diggablity = "normal",
--         weight = 0,
--         crackiness = 0,
--         crumbliness = 0,
--         cuttability = 0,
--         flammability = 0,
--     },
--     legacy_facedir_simple = false, -- Support maps made in and before January 2012
--     legacy_wallmounted = false, -- Support maps made in and before January 2012
-- }
--
-- Recipe:
-- {
--     output = 'default:pick_stone',
--     recipe = {
--         {'default:cobble', 'default:cobble', 'default:cobble'},
--         {'', 'default:stick', ''},
--         {'', 'default:stick', ''},
--     },
--     replacements = <optional list of item pairs,
--                     replace one input item with another item on crafting>
-- }
--
-- Recipe (shapeless):
-- {
--     type = "shapeless",
--     output = 'mushrooms:mushroom_stew',
--     recipe = {
--         "mushrooms:bowl",
--         "mushrooms:mushroom_brown",
--         "mushrooms:mushroom_red",
--     },
--     replacements = <optional list of item pairs,
--                     replace one input item with another item on crafting>
-- }
--
-- Recipe (tool repair):
-- {
--     type = "toolrepair",
--     additional_wear = -0.02,
-- }
--
-- Recipe (cooking):
-- {
--     type = "cooking",
--     output = "default:glass",
--     recipe = "default:sand",
--     cooktime = 3,
-- }
--
-- Recipe (furnace fuel):
-- {
--     type = "fuel",
--     recipe = "default:leaves",
--     burntime = 1,
-- }
--
-- ABM (ActiveBlockModifier) definition:
-- {
--     nodenames = {"default:lava_source"},
--     neighbors = {"default:water_source", "default:water_flowing"}, -- (any of these)
--      ^ If left out or empty, any neighbor will do
--      ^ This might get removed in the future
--     interval = 1.0, -- (operation interval)
--     chance = 1, -- (chance of trigger is 1.0/this)
--     action = func(pos, node, active_object_count, active_object_count_wider),
-- }
